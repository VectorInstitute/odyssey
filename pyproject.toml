[tool.poetry]
name = "odyssey"
version = "0.1.0"
description = "A toolkit to develop clinical foundation models using electronic health records"
authors = ["Vector AI Engineering <odyssey@vectorinstitute.ai>"]
license = "Apache-2.0"
repository = "https://github.com/VectorInstitute/odyssey"
documentation = "https://vectorinstitute.github.io/odyssey/"
packages = [
    { include = "odyssey" },
]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9, <3.12"
keras = "2.15.0"
lightning = "2.3.3"
scikit-learn = "^1.2.2"
torch = "^2.2.0"
tqdm = "4.66.3"
wandb = "0.16.0"
pandas = "^2.2.1"
sqlalchemy = "^2.0.28"
psycopg2-binary = "^2.9.9"
fhir-resources = "^5.1.1"
pyarrow = "^15.0.1"
plotly = "^5.7.0"
tokenizers = "^0.15.2"
transformers = "^4.39.3"
captum = "^0.7.0"
scikit-multilearn = "^0.2.0"
numpy = "^1.26.4"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.1.1"
pre-commit = "^4.0.0"
pytest-cov = "^3.0.0"
codecov = "^2.1.13"
nbstripout = "^0.6.1"
mypy = "^1.7.0"
ruff = "^0.3.0"
nbqa = { version = "^1.7.0", extras = ["toolchain"] }

[tool.mypy]
plugins = ["numpy.typing.mypy_plugin"]
ignore_missing_imports = true
install_types = true
pretty = true
namespace_packages = true
explicit_package_bases = true
non_interactive = true
warn_unused_configs = true
allow_any_generics = false
allow_subclassing_any = false
allow_untyped_calls = false
allow_untyped_defs = false
allow_incomplete_defs = false
check_untyped_defs = true
allow_untyped_decorators = false
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
implicit_reexport = false
strict_equality = true
extra_checks = true

[tool.ruff]
include = ["*.py", "pyproject.toml", "*.ipynb"]
line-length = 88
exclude = [
    "odyssey/models/ehr_mamba/mamba_utils.py",
]
[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "W", # pycodestyle
    "N", # pep8-naming
    "ERA", # eradicate
    "PL", # pylint
]
fixable = ["A", "B", "COM", "C4", "RET", "SIM", "ICN", "Q", "RSE", "D", "E", "F", "I", "W", "N", "ERA", "PL"]
ignore = [
    "B905", # `zip()` without an explicit `strict=` parameter
    "E501", # line too long
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "PLR2004", # Replace magic number with named constant
    "PLR0913", # Too many arguments
    "COM812",
]

# Ignore import violations in all `__init__.py` files.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]

[tool.ruff.lint.pep8-naming]
ignore-names = ["X*", "setUp", "tearDown"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.coverage]
    [tool.coverage.run]
    source=["odyssey"]
    omit=["tests/*", "*__init__.py"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
